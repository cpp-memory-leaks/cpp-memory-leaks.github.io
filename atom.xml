<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OQS.com 知识分享</title>
  
  
  <link href="https://cpp-memory-leaks.github.io/atom.xml" rel="self"/>
  
  <link href="https://cpp-memory-leaks.github.io/"/>
  <updated>2024-12-25T06:49:39.603Z</updated>
  <id>https://cpp-memory-leaks.github.io/</id>
  
  <author>
    <name>OQS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/%E6%91%87%E6%9D%86/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/%E6%91%87%E6%9D%86/</id>
    <published>2024-12-25T10:55:34.431Z</published>
    <updated>2024-12-25T06:49:39.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义摇杆"><a href="#自定义摇杆" class="headerlink" title="自定义摇杆"></a>自定义摇杆</h1><p>今天做项目的时候，接到一个需求，需要做一个摇杆去控制物体的移动，功能还是挺复杂的</p><h2 id="1-功能："><a href="#1-功能：" class="headerlink" title="1.功能："></a>1.功能：</h2><ol><li>点击内圈发送一次对应的方向的信号</li><li>松开鼠标的时候如果在内圈就发送结束信号（第一第二点总结起来就是按下跑，松开停）</li><li>松开的时候如果鼠标位置在外圈，就不发送结束信号，一直跑</li><li>点击结束按钮或者内圈范围都会发送信号</li></ol><h3 id="直接上图"><a href="#直接上图" class="headerlink" title="直接上图"></a>直接上图</h3><p>原始状态：</p><p><img src="/./%E6%91%87%E6%9D%86/image-20241225144138824.png" alt="image-20241225144138824"></p><p>持续行走状态：</p><p><img src="/./%E6%91%87%E6%9D%86/image-20241225144158138.png" alt="image-20241225144158138"></p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>DirectionalControl.h头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DIRECTIONALCONTROL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DIRECTIONALCONTROL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCheckBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPointF&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectionalControl</span> : <span class="keyword">public</span> QWidget &#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">DirectionButton</span></span><br><span class="line">&#123;</span><br><span class="line">UpButton,</span><br><span class="line">DownButton,</span><br><span class="line">LeftButton,</span><br><span class="line">RightButton,</span><br><span class="line">StopButton</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">DirectionalControl</span><span class="params">(QWidget* parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">resetDragPntPos</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendDirectionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">directionChanged</span><span class="params">(<span class="type">double</span> angle)</span></span>; <span class="comment">// 信号：方向改变</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateDragPntDirection</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent* event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent* event)</span><span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> outerRadius = <span class="number">80</span>; <span class="comment">// 外圈半径</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> innerRadius = <span class="number">45</span>;  <span class="comment">// 内圈半径</span></span><br><span class="line">QPointF center;              <span class="comment">// 中心点</span></span><br><span class="line">QPointF dragPoint;           <span class="comment">// 当前拖动点</span></span><br><span class="line"><span class="type">bool</span> isDragging = <span class="literal">false</span>;     <span class="comment">// 是否正在拖动</span></span><br><span class="line"><span class="type">double</span> m_angle;</span><br><span class="line"><span class="type">bool</span> m_moving = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">QPushButton* stopButton;    <span class="comment">//按钮</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QTimer* m_timer;            <span class="comment">//定时器，控制angleChange()发送频率</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInsideOuterCircle</span><span class="params">(<span class="type">const</span> QPointF&amp; point)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInsideInnerCircle</span><span class="params">(<span class="type">const</span> QPointF&amp; point)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calculateDirection</span><span class="params">()</span></span>; <span class="comment">// 计算当前方向</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setupButtons</span><span class="params">()</span></span>;       <span class="comment">// 初始化按钮布局</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DIRECTIONALCONTROL_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DirectionalControl.cpp源代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DirectionalControl.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;corecrt_math_defines.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtMath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line">DirectionalControl::<span class="built_in">DirectionalControl</span>(QWidget* parent)</span><br><span class="line">: <span class="built_in">QWidget</span>(parent), <span class="built_in">center</span>(<span class="number">100</span>, <span class="number">100</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"><span class="built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::WindowStaysOnTopHint);</span><br><span class="line"><span class="built_in">setAttribute</span>(Qt::WA_TranslucentBackground);</span><br><span class="line"><span class="built_in">setFocusPolicy</span>(Qt::StrongFocus);</span><br><span class="line"><span class="comment">//this-&gt;setCursor(Qt::CursorShape::PointingHandCursor);</span></span><br><span class="line">m_timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>());</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>());</span><br><span class="line"></span><br><span class="line">QSize size = <span class="keyword">this</span>-&gt;<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">setupButtons</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">QFile <span class="title">file</span><span class="params">(<span class="string">&quot;:/qss/resources/qss/DirectionControl.qss&quot;</span>)</span></span>;</span><br><span class="line">QByteArray style;</span><br><span class="line"><span class="keyword">if</span> (file.<span class="built_in">open</span>(QIODevice::ReadOnly))</span><br><span class="line">&#123;</span><br><span class="line">style += file.<span class="built_in">readAll</span>();</span><br><span class="line">file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setStyleSheet</span>(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::resetDragPntPos</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>());</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>());</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::sendDirectionChanged</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">emit <span class="title">directionChanged</span><span class="params">(m_angle)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::setupButtons</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 中心按钮：开始/暂停</span></span><br><span class="line">stopButton = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">stopButton-&gt;<span class="built_in">move</span>(<span class="number">90</span>, <span class="number">90</span>);</span><br><span class="line">stopButton-&gt;<span class="built_in">setObjectName</span>(<span class="string">&quot;stopButton&quot;</span>);</span><br><span class="line"><span class="built_in">connect</span>(stopButton, &amp;QPushButton::clicked, [<span class="keyword">this</span>]() &#123;</span><br><span class="line">emit <span class="built_in">stopMove</span>();</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>());</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>());</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line">&#125;);</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::paintEvent</span><span class="params">(QPaintEvent* event)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Q_UNUSED</span>(event);</span><br><span class="line"></span><br><span class="line"><span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"><span class="comment">// 抗锯齿</span></span><br><span class="line">painter.<span class="built_in">setRenderHint</span>(QPainter::Antialiasing, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无边框,直接刷色</span></span><br><span class="line">painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> QColor <span class="title">outerCircleColor</span><span class="params">(<span class="number">200</span>, <span class="number">220</span>, <span class="number">255</span>, <span class="number">200</span>)</span></span>; <span class="comment">// 外圈颜色</span></span><br><span class="line"><span class="function"><span class="type">const</span> QColor <span class="title">innerCircleColor</span><span class="params">(<span class="number">249</span>, <span class="number">249</span>, <span class="number">249</span>, <span class="number">150</span>)</span></span>; <span class="comment">// 内圈颜色</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> centerDotRadius = <span class="number">3</span>; <span class="comment">// 中心点半径</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dragRadius = <span class="number">15</span>;     <span class="comment">// 拖动点半径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制外圈</span></span><br><span class="line">painter.<span class="built_in">setBrush</span>(outerCircleColor);</span><br><span class="line">painter.<span class="built_in">drawEllipse</span>(center, outerRadius, outerRadius);</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制内内圈</span></span><br><span class="line">painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">150</span>), <span class="number">3</span>));<span class="comment">//外边框</span></span><br><span class="line">painter.<span class="built_in">setBrush</span>(innerCircleColor);</span><br><span class="line">painter.<span class="built_in">drawEllipse</span>(center, dragRadius, dragRadius);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制内圈</span></span><br><span class="line">painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">150</span>), <span class="number">3</span>));<span class="comment">//外边框</span></span><br><span class="line">painter.<span class="built_in">setBrush</span>(innerCircleColor);</span><br><span class="line">painter.<span class="built_in">drawEllipse</span>(center, innerRadius, innerRadius);</span><br><span class="line"><span class="comment">// 确保 dragPoint 不进入内圈且不超出外圈</span></span><br><span class="line"><span class="type">double</span> dx = dragPoint.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = dragPoint.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="type">double</span> distance = std::<span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 dragPoint 超出了外圈，修正到外圈边缘</span></span><br><span class="line"><span class="keyword">if</span> (distance &gt; outerRadius) &#123;</span><br><span class="line"><span class="type">double</span> scale = outerRadius / distance;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>() + dx * scale);</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>() + dy * scale);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)));</span><br><span class="line"><span class="function">QFont <span class="title">font</span><span class="params">(<span class="string">&quot;Arial&quot;</span>, <span class="number">20</span>, QFont::Bold)</span></span>;</span><br><span class="line"><span class="comment">// 设置画笔的字体</span></span><br><span class="line">painter.<span class="built_in">setFont</span>(font);</span><br><span class="line"></span><br><span class="line">painter.<span class="built_in">drawText</span>(<span class="number">87</span>, <span class="number">50</span>, <span class="string">&quot;W&quot;</span>);</span><br><span class="line">painter.<span class="built_in">drawText</span>(<span class="number">28</span>, <span class="number">110</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">painter.<span class="built_in">drawText</span>(<span class="number">90</span>, <span class="number">172</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">painter.<span class="built_in">drawText</span>(<span class="number">152</span>, <span class="number">110</span>, <span class="string">&quot;D&quot;</span>);</span><br><span class="line"><span class="comment">// 设置画刷颜色为白色并绘制拖动点</span></span><br><span class="line">painter.<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line">painter.<span class="built_in">setBrush</span>(Qt::white);</span><br><span class="line">painter.<span class="built_in">drawEllipse</span>(dragPoint, dragRadius, dragRadius);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在拖动点的中心绘制中心点</span></span><br><span class="line">painter.<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">0</span>, <span class="number">117</span>, <span class="number">255</span>), <span class="number">5</span>));</span><br><span class="line">painter.<span class="built_in">setBrush</span>(<span class="built_in">QColor</span>(<span class="number">0</span>, <span class="number">117</span>, <span class="number">255</span>));</span><br><span class="line">painter.<span class="built_in">drawEllipse</span>(dragPoint, centerDotRadius, centerDotRadius);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::mousePressEvent</span><span class="params">(QMouseEvent* event)</span> </span>&#123;</span><br><span class="line">QPointF pos = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line"><span class="comment">//if (isInsideOuterCircle(pos) &amp;&amp; isInsideInnerCircle(pos)) &#123;</span></span><br><span class="line">isDragging = <span class="literal">true</span>;</span><br><span class="line">dragPoint = pos;</span><br><span class="line"><span class="function">emit <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">calculateDirection</span>();</span><br><span class="line"><span class="built_in">sendDirectionChanged</span>();</span><br><span class="line"><span class="comment">// 限制拖动点到外圈的范围</span></span><br><span class="line"><span class="type">double</span> dx = pos.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = pos.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="type">double</span> distance = std::<span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &lt; innerRadius) &#123;</span><br><span class="line"><span class="function">emit <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">m_timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">connect</span>(m_timer, &amp;QTimer::timeout, <span class="keyword">this</span>, &amp;DirectionalControl::sendDirectionChanged, Qt::<span class="built_in">ConnectionType</span>(Qt::AutoConnection | Qt::UniqueConnection));</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::mouseMoveEvent</span><span class="params">(QMouseEvent* event)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isDragging) &#123;</span><br><span class="line">QPointF pos = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制拖动点到外圈的范围</span></span><br><span class="line"><span class="type">double</span> dx = pos.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = pos.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="type">double</span> distance = std::<span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &gt; outerRadius) &#123;</span><br><span class="line"><span class="comment">// 将拖动点限制在外圈的边界</span></span><br><span class="line"><span class="type">double</span> scale = outerRadius / distance;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>() + dx * scale);</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>() + dy * scale);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*else if (distance &gt; innerRadius)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">dragPoint.setX(center.x());</span></span><br><span class="line"><span class="comment">dragPoint.setY(center.y());</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dragPoint = pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">calculateDirection</span>();</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::mouseReleaseEvent</span><span class="params">(QMouseEvent* event)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Q_UNUSED</span>(event);</span><br><span class="line">isDragging = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// TODO 点击内圈跑一步，点击外圈持续跑</span></span><br><span class="line"><span class="comment">// 释放时恢复到中心</span></span><br><span class="line"><span class="comment">// dragPoint = center;</span></span><br><span class="line"></span><br><span class="line">QPointF pos = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制拖动点到外圈的范围</span></span><br><span class="line"><span class="type">double</span> dx = pos.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = pos.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="type">double</span> distance = std::<span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (distance &gt; innerRadius) &#123;</span><br><span class="line"><span class="comment">// 将拖动点限制在外圈的边界</span></span><br><span class="line"><span class="type">double</span> distanceFromCenter = (outerRadius + innerRadius) / <span class="number">2</span>;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>() +</span><br><span class="line">distanceFromCenter * std::<span class="built_in">cos</span>(<span class="built_in">qDegreesToRadians</span>(m_angle)));</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>() -</span><br><span class="line">distanceFromCenter * std::<span class="built_in">sin</span>(<span class="built_in">qDegreesToRadians</span>(m_angle)));</span><br><span class="line">stopButton-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (distance &lt; innerRadius)<span class="comment">//拖动点释放前在内圈，就停止</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">calculateDirection</span>();</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>());</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>());</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*else &#123;</span></span><br><span class="line"><span class="comment">dragPoint = pos;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*double distanceFromCenter = (outerRadius + innerRadius) / 2;</span></span><br><span class="line"><span class="comment">dragPoint.setX(center.x() +</span></span><br><span class="line"><span class="comment">distanceFromCenter * std::cos(qDegreesToRadians(m_angle)));</span></span><br><span class="line"><span class="comment">dragPoint.setY(center.y() -</span></span><br><span class="line"><span class="comment">distanceFromCenter * std::sin(qDegreesToRadians(m_angle)));*/</span></span><br><span class="line">m_timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::updateDragPntDirection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> distanceFromCenter = (outerRadius + innerRadius) / <span class="number">2</span>;</span><br><span class="line">dragPoint.<span class="built_in">setX</span>(center.<span class="built_in">x</span>() + distanceFromCenter * std::<span class="built_in">cos</span>(<span class="built_in">qDegreesToRadians</span>(m_angle)));</span><br><span class="line">dragPoint.<span class="built_in">setY</span>(center.<span class="built_in">y</span>() - distanceFromCenter * std::<span class="built_in">sin</span>(<span class="built_in">qDegreesToRadians</span>(m_angle)));</span><br><span class="line"><span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::keyPressEvent</span><span class="params">(QKeyEvent* event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QWidget::<span class="built_in">keyPressEvent</span>(event);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* 防止重复触发按键，这是官方文档的描述</span></span><br><span class="line"><span class="comment">* bool QKeyEvent::isAutoRepeat() const</span></span><br><span class="line"><span class="comment">* Returns true if this event comes from an auto-repeating key; </span></span><br><span class="line"><span class="comment">* returns false if it comes from an initial key press.</span></span><br><span class="line"><span class="comment">* Note that if the event is a multiple-key compressed event that is partly due to auto-repeat,</span></span><br><span class="line"><span class="comment">* this function could return either true or false indeterminately.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (event-&gt;<span class="built_in">isAutoRepeat</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (event-&gt;<span class="built_in">key</span>()) &#123;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_W:</span><br><span class="line">m_angle = <span class="number">90</span>;</span><br><span class="line"><span class="built_in">sendDirectionChanged</span>();</span><br><span class="line"><span class="function">emit <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">emit <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line">stopButton-&gt;<span class="built_in">show</span>();</span><br><span class="line">m_moving = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">updateDragPntDirection</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_A:</span><br><span class="line">m_angle = <span class="number">180</span>;</span><br><span class="line"><span class="built_in">sendDirectionChanged</span>();</span><br><span class="line"><span class="function">emit <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">emit <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line">stopButton-&gt;<span class="built_in">show</span>();</span><br><span class="line">m_moving = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">updateDragPntDirection</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_S:</span><br><span class="line">m_angle = <span class="number">270</span>;</span><br><span class="line"><span class="built_in">sendDirectionChanged</span>();</span><br><span class="line"><span class="function">emit <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">emit <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line">stopButton-&gt;<span class="built_in">show</span>();</span><br><span class="line">m_moving = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">updateDragPntDirection</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_D:</span><br><span class="line">m_angle = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">sendDirectionChanged</span>();</span><br><span class="line"><span class="function">emit <span class="title">handleClick</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">emit <span class="title">startMove</span><span class="params">()</span></span>;</span><br><span class="line">stopButton-&gt;<span class="built_in">show</span>();</span><br><span class="line">m_moving = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">updateDragPntDirection</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标记事件为已处理</span></span><br><span class="line">event-&gt;<span class="built_in">accept</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::keyReleaseEvent</span><span class="params">(QKeyEvent* event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QWidget::<span class="built_in">keyReleaseEvent</span>(event);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只处理非自动重复的松键事件</span></span><br><span class="line"><span class="keyword">if</span> (event-&gt;<span class="built_in">isAutoRepeat</span>()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (event-&gt;<span class="built_in">key</span>()) &#123;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_W:</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">resetDragPntPos</span>();</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_A:</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">resetDragPntPos</span>();</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_S:</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">resetDragPntPos</span>();</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_D:</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">resetDragPntPos</span>();</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> Qt::Key_Space:</span><br><span class="line"><span class="function">emit <span class="title">stopMove</span><span class="params">()</span></span>;</span><br><span class="line">m_moving = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">resetDragPntPos</span>();</span><br><span class="line">stopButton-&gt;<span class="built_in">hide</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记事件为已处理</span></span><br><span class="line">event-&gt;<span class="built_in">accept</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DirectionalControl::isInsideOuterCircle</span><span class="params">(<span class="type">const</span> QPointF&amp; point)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> dx = point.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = point.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">sqrt</span>(dx * dx + dy * dy) &lt;= outerRadius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DirectionalControl::isInsideInnerCircle</span><span class="params">(<span class="type">const</span> QPointF&amp; point)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> dx = point.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="type">double</span> dy = point.<span class="built_in">y</span>() - center.<span class="built_in">y</span>();</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">sqrt</span>(dx * dx + dy * dy) &lt;= innerRadius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DirectionalControl::calculateDirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> dx = dragPoint.<span class="built_in">x</span>() - center.<span class="built_in">x</span>();</span><br><span class="line"><span class="comment">// Y 轴正方向向下，所以取反</span></span><br><span class="line"><span class="type">double</span> dy = center.<span class="built_in">y</span>() - dragPoint.<span class="built_in">y</span>();</span><br><span class="line"><span class="type">double</span> angle = std::<span class="built_in">atan2</span>(dy, dx) * (<span class="number">180.0</span> / M_PI);</span><br><span class="line"><span class="comment">// 保证角度为 0-360 度</span></span><br><span class="line"><span class="keyword">if</span> (angle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">angle += <span class="number">360.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_angle = angle;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义摇杆&quot;&gt;&lt;a href=&quot;#自定义摇杆&quot; class=&quot;headerlink&quot; title=&quot;自定义摇杆&quot;&gt;&lt;/a&gt;自定义摇杆&lt;/h1&gt;&lt;p&gt;今天做项目的时候，接到一个需求，需要做一个摇杆去控制物体的移动，功能还是挺复杂的&lt;/p&gt;
&lt;h2 id=&quot;1-功能：</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/README/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/README/</id>
    <published>2024-12-25T10:55:34.428Z</published>
    <updated>2024-12-25T09:24:45.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Notes&quot;&gt;&lt;a href=&quot;#Notes&quot; class=&quot;headerlink&quot; title=&quot;Notes&quot;&gt;&lt;/a&gt;Notes&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/Qt%E4%BD%BF%E7%94%A8libheif%E5%BA%93%E6%98%BE%E7%A4%BA%E8%8B%B9%E6%9E%9C%E7%9A%84heic%E5%9B%BE%E7%89%87/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/Qt%E4%BD%BF%E7%94%A8libheif%E5%BA%93%E6%98%BE%E7%A4%BA%E8%8B%B9%E6%9E%9C%E7%9A%84heic%E5%9B%BE%E7%89%87/</id>
    <published>2024-12-25T10:55:34.425Z</published>
    <updated>2024-12-25T06:31:22.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt使用libheif库显示苹果的heic图片"><a href="#Qt使用libheif库显示苹果的heic图片" class="headerlink" title="Qt使用libheif库显示苹果的heic图片"></a>Qt使用libheif库显示苹果的heic图片</h1><h2 id="1-先使用vcpkg安装libheif库"><a href="#1-先使用vcpkg安装libheif库" class="headerlink" title="1.先使用vcpkg安装libheif库"></a>1.先使用vcpkg安装libheif库</h2><p>自己根据需要选择位数以及动态库还是静态库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vcpkg install libheif:x86-windows-static</span><br><span class="line">vcpkg install libheif:x64-windows-static</span><br></pre></td></tr></table></figure><h2 id="2-直接上代码"><a href="#2-直接上代码" class="headerlink" title="2.直接上代码"></a>2.直接上代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QImage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libheif/heif.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">QImage <span class="title">heifToQImage</span><span class="params">(<span class="type">const</span> std::string&amp; filePath)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 libheif 句柄</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">heif_context</span>* ctx = <span class="built_in">heif_context_alloc</span>();</span><br><span class="line">    <span class="keyword">if</span> (!ctx) &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to allocate HEIF context.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取 HEIF 文件</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">heif_error</span> err = <span class="built_in">heif_context_read_from_file</span>(ctx, filePath.<span class="built_in">c_str</span>(), <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (err.code != heif_error_Ok) &#123;</span><br><span class="line">        <span class="built_in">heif_context_free</span>(ctx);</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to read HEIF file: &quot;</span> + std::<span class="built_in">string</span>(err.message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取主图像句柄</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">heif_image_handle</span>* handle = <span class="literal">nullptr</span>;</span><br><span class="line">    err = <span class="built_in">heif_context_get_primary_image_handle</span>(ctx, &amp;handle);</span><br><span class="line">    <span class="keyword">if</span> (err.code != heif_error_Ok) &#123;</span><br><span class="line">        <span class="built_in">heif_context_free</span>(ctx);</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to get primary image handle: &quot;</span> + std::<span class="built_in">string</span>(err.message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解码图像</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">heif_image</span>* img = <span class="literal">nullptr</span>;</span><br><span class="line">    err = <span class="built_in">heif_decode_image</span>(handle, &amp;img, heif_colorspace_RGB, heif_chroma_interleaved_RGBA, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (err.code != heif_error_Ok) &#123;</span><br><span class="line">        <span class="built_in">heif_image_handle_release</span>(handle);</span><br><span class="line">        <span class="built_in">heif_context_free</span>(ctx);</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Failed to decode HEIF image: &quot;</span> + std::<span class="built_in">string</span>(err.message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取图像数据</span></span><br><span class="line">    <span class="type">int</span> width = <span class="built_in">heif_image_get_width</span>(img, heif_channel_interleaved);</span><br><span class="line">    <span class="type">int</span> height = <span class="built_in">heif_image_get_height</span>(img, heif_channel_interleaved);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint8_t</span>* data = <span class="built_in">heif_image_get_plane_readonly</span>(img, heif_channel_interleaved, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建缓冲区并复制数据</span></span><br><span class="line">    <span class="function">QVector&lt;uchar&gt; <span class="title">buffer</span><span class="params">(width * height * <span class="number">4</span>)</span></span>; <span class="comment">// RGBA8888，每像素4字节</span></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer.<span class="built_in">data</span>(), data, buffer.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为 QImage</span></span><br><span class="line">    <span class="function">QImage <span class="title">qimage</span><span class="params">(buffer.data(), width, height, QImage::Format_RGBA8888)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="built_in">heif_image_release</span>(img);</span><br><span class="line">    <span class="built_in">heif_image_handle_release</span>(handle);</span><br><span class="line">    <span class="built_in">heif_context_free</span>(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> qimage.<span class="built_in">copy</span>(); <span class="comment">// 确保 QImage 独立持有数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        QImage image = <span class="built_in">heifToQImage</span>(<span class="string">&quot;C:/Users/lianx/Pictures/IMG_0001.HEIC&quot;</span>);</span><br><span class="line"></span><br><span class="line">        QLabel label;</span><br><span class="line">        label.<span class="built_in">setPixmap</span>(QPixmap::<span class="built_in">fromImage</span>(image));</span><br><span class="line">        label.<span class="built_in">setScaledContents</span>(<span class="literal">true</span>);</span><br><span class="line">        label.<span class="built_in">resize</span>(image.<span class="built_in">size</span>()/<span class="number">2</span>);</span><br><span class="line">        label.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> app.<span class="built_in">exec</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Error: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-效果如图"><a href="#3-效果如图" class="headerlink" title="3.效果如图"></a>3.效果如图</h2><p><img src="/./Qt%E4%BD%BF%E7%94%A8libheif%E5%BA%93%E6%98%BE%E7%A4%BA%E8%8B%B9%E6%9E%9C%E7%9A%84heic%E5%9B%BE%E7%89%87/image-20241225142838900.png" alt="image-20241225142838900"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt使用libheif库显示苹果的heic图片&quot;&gt;&lt;a href=&quot;#Qt使用libheif库显示苹果的heic图片&quot; class=&quot;headerlink&quot; title=&quot;Qt使用libheif库显示苹果的heic图片&quot;&gt;&lt;/a&gt;Qt使用libheif库显示苹果的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/</id>
    <published>2024-12-25T10:55:34.422Z</published>
    <updated>2024-12-25T07:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt高性能列表控件之QListView的使用及优点"><a href="#Qt高性能列表控件之QListView的使用及优点" class="headerlink" title="Qt高性能列表控件之QListView的使用及优点"></a>Qt高性能列表控件之QListView的使用及优点</h1><h2 id="1-高性能列表如何能实线高性能？"><a href="#1-高性能列表如何能实线高性能？" class="headerlink" title="1.高性能列表如何能实线高性能？"></a>1.高性能列表如何能实线高性能？</h2><p>高性能列表无非就解决两个痛点：</p><p><strong>数据存放在哪里</strong></p><p><strong>数据如何展示</strong></p><p>为何QListWidget就不能高性能呢？<code>QListWidget</code> 是一个方便的控件，它内部管理了一个项目列表，并提供了一些简单的接口来添加、删除和修改这些项目。但<strong>没有对数据存储和数据展示进行过多的优化</strong>，这种方式适合于简单的应用场景，其中列表的大小不会很大，因为每个项目都会被存储为一个 <code>QListWidgetItem</code> 对象。</p><p>在QListView体系里，<strong>QAbstractListModel</strong>解决的是“<strong>数据存哪</strong>”，解决的是第一个问题，而<strong>QAbstractItemDelegate</strong>解决的是数据“<strong>如何展示</strong>”，解决的是第二个问题。</p><h2 id="2-QListView和QAbstractListModel解决数据存哪"><a href="#2-QListView和QAbstractListModel解决数据存哪" class="headerlink" title="2.QListView和QAbstractListModel解决数据存哪"></a>2.QListView和QAbstractListModel解决数据存哪</h2><p>这里就不从QAbstractListModel派生写自定义的类了，直接使用Qt从QAbstractListModel派生的类QStandardItemModel</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化QListView</span></span><br><span class="line">QListView* photoListViewphotoListView = <span class="keyword">new</span> <span class="built_in">QListView</span>(<span class="keyword">this</span>);</span><br><span class="line">photoListView-&gt;<span class="built_in">setViewMode</span>(QListView::IconMode);</span><br><span class="line">photoListView-&gt;<span class="built_in">setResizeMode</span>(QListView::Adjust);</span><br><span class="line">photoListView-&gt;<span class="built_in">setIconSize</span>(<span class="built_in">QSize</span>(<span class="number">150</span>, <span class="number">150</span>));</span><br><span class="line">photoListView-&gt;<span class="built_in">setSpacing</span>(<span class="number">10</span>);</span><br><span class="line">photoListView-&gt;<span class="built_in">setSelectionMode</span>(QAbstractItemView::ExtendedSelection);</span><br><span class="line">photoListView-&gt;<span class="built_in">setUniformItemSizes</span>(<span class="literal">true</span>);</span><br><span class="line">photoListView-&gt;<span class="built_in">setVerticalScrollBarPolicy</span>(Qt::ScrollBarAlwaysOff);</span><br><span class="line">photoListView-&gt;<span class="built_in">setAttribute</span>(Qt::WA_Hover); <span class="comment">// 启用 Hover 事件</span></span><br><span class="line">photoListView-&gt;<span class="built_in">viewport</span>()-&gt;<span class="built_in">setAttribute</span>(Qt::WA_Hover);</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化QStandardItemModel</span></span><br><span class="line">QStandardItemModel* m_photoModel = <span class="keyword">new</span> <span class="built_in">QStandardItemModel</span>(<span class="keyword">this</span>);</span><br><span class="line">ui-&gt;listView_Photos-&gt;<span class="built_in">setItemDelegate</span>(<span class="keyword">new</span> <span class="built_in">PhotoDelegate</span>(ui-&gt;listView_Photos));<span class="comment">//这是解决数据如何展示的</span></span><br><span class="line">ui-&gt;listView_Photos-&gt;<span class="built_in">model</span>()-&gt;<span class="built_in">removeRows</span>(<span class="number">0</span>, ui-&gt;listView_Photos-&gt;<span class="built_in">model</span>()-&gt;<span class="built_in">rowCount</span>(<span class="built_in">QModelIndex</span>()));</span><br><span class="line"><span class="comment">//模拟数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> photoInfo : m_vecPhoto) &#123;</span><br><span class="line">QStandardItem* item = <span class="keyword">new</span> QStandardItem;</span><br><span class="line">item-&gt;<span class="built_in">setEditable</span>(<span class="literal">false</span>);</span><br><span class="line">item-&gt;<span class="built_in">setData</span>(<span class="string">&quot;:/images/Demo.png&quot;</span>, Qt::UserRole);</span><br><span class="line"><span class="comment">//item-&gt;setData(photoInfo.duration,Qt::UserRole);</span></span><br><span class="line">item-&gt;<span class="built_in">setData</span>(photoInfo.fileName, Qt::UserRole + <span class="number">1</span>);</span><br><span class="line">item-&gt;<span class="built_in">setData</span>(photoInfo.width + <span class="string">&quot;x&quot;</span> + photoInfo.height, Qt::UserRole + <span class="number">2</span>);</span><br><span class="line">item-&gt;<span class="built_in">setData</span>(photoInfo.dateCreated, Qt::UserRole + <span class="number">3</span>);</span><br><span class="line">item-&gt;<span class="built_in">setData</span>(photoInfo.fileSize, Qt::UserRole + <span class="number">4</span>);</span><br><span class="line">item-&gt;<span class="built_in">setData</span>(photoInfo.dir, Qt::UserRole + <span class="number">5</span>);</span><br><span class="line"><span class="comment">//将数据存放到QStandardItemModel里面</span></span><br><span class="line">m_photoModel-&gt;<span class="built_in">appendRow</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-QListView和QAbstractItemDelegate解决数据如何展示"><a href="#3-QListView和QAbstractItemDelegate解决数据如何展示" class="headerlink" title="3.QListView和QAbstractItemDelegate解决数据如何展示"></a>3.QListView和QAbstractItemDelegate解决数据如何展示</h2><p>QStyledItemDelegate是从QAbstractItemDelegate派生的类，<strong>QListView的View模型采用的是paint函数来呈现，paint的形式用起来更复杂，但性能天花板更高</strong>。这就是QListView的性能如此高的原因。</p><p>包括了IconMode以及ListMode的显示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PhotoDelegate</span> : <span class="keyword">public</span> QStyledItemDelegate &#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ViewMode</span> &#123; ListMode, GridMode &#125;;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">PhotoDelegate</span><span class="params">(QListView* parent = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function">: QStyledItemDelegate(parent) &#123;</span></span><br><span class="line">listView = parent;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">paint</span><span class="params">(QPainter* painter, <span class="type">const</span> QStyleOptionViewItem&amp; option, <span class="type">const</span> QModelIndex&amp; index)</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">painter-&gt;<span class="built_in">save</span>();</span><br><span class="line">painter-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line">QListView::ViewMode viewMode = listView-&gt;<span class="built_in">viewMode</span>();</span><br><span class="line"><span class="function">QPixmap <span class="title">pixmap</span><span class="params">(index.data(Qt::UserRole).toString())</span></span>;</span><br><span class="line"><span class="comment">//图片信息</span></span><br><span class="line">QString fileName = index.<span class="built_in">data</span>(Qt::UserRole + <span class="number">1</span>).<span class="built_in">toString</span>();</span><br><span class="line">QString fileReso = index.<span class="built_in">data</span>(Qt::UserRole + <span class="number">2</span>).<span class="built_in">toString</span>();</span><br><span class="line">QString fileDate = index.<span class="built_in">data</span>(Qt::UserRole + <span class="number">3</span>).<span class="built_in">toString</span>();</span><br><span class="line">QString fileSize = index.<span class="built_in">data</span>(Qt::UserRole + <span class="number">4</span>).<span class="built_in">toString</span>();</span><br><span class="line"></span><br><span class="line">QRect iconRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">left</span>() + <span class="number">5</span>, option.rect.<span class="built_in">top</span>() + <span class="number">5</span>, <span class="number">50</span>, <span class="number">50</span>); <span class="comment">// 图标区域</span></span><br><span class="line">QRect nameRect = <span class="built_in">QRect</span>(iconRect.<span class="built_in">right</span>() - <span class="number">50</span>, option.rect.<span class="built_in">top</span>() + <span class="number">100</span>, option.rect.<span class="built_in">width</span>(), <span class="number">20</span>); <span class="comment">// 文件名</span></span><br><span class="line">QRect dateRect = <span class="built_in">QRect</span>(iconRect.<span class="built_in">right</span>() - <span class="number">50</span>, option.rect.<span class="built_in">top</span>() + <span class="number">120</span>, option.rect.<span class="built_in">width</span>(), <span class="number">20</span>); <span class="comment">// 日期</span></span><br><span class="line">QRect sizeRect = <span class="built_in">QRect</span>(iconRect.<span class="built_in">right</span>() - <span class="number">50</span>, option.rect.<span class="built_in">top</span>() + <span class="number">140</span>, option.rect.<span class="built_in">width</span>(), <span class="number">20</span>); <span class="comment">// 大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isSelected = option.state &amp; QStyle::State_Selected;</span><br><span class="line"><span class="type">bool</span> isHovered = option.state &amp; QStyle::State_MouseOver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (viewMode == QListView::ViewMode::IconMode)</span><br><span class="line">&#123;</span><br><span class="line">QString filePath = index.<span class="built_in">data</span>(Qt::UserRole).<span class="built_in">value</span>&lt;QString&gt;();</span><br><span class="line">QRect imageRect = option.rect;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置图片为正方形，填充区域</span></span><br><span class="line"><span class="type">int</span> size = <span class="built_in">qMin</span>(imageRect.<span class="built_in">width</span>(), imageRect.<span class="built_in">height</span>());</span><br><span class="line"><span class="function">QRect <span class="title">squareRect</span><span class="params">(imageRect.topLeft(), QSize(size, size))</span></span>;</span><br><span class="line">squareRect.<span class="built_in">moveCenter</span>(imageRect.<span class="built_in">center</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抗锯齿</span></span><br><span class="line">painter-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 裁剪，绘图</span></span><br><span class="line">QPainterPath clipPath;</span><br><span class="line">clipPath.<span class="built_in">addRoundedRect</span>(squareRect, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">painter-&gt;<span class="built_in">setClipPath</span>(clipPath);</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(squareRect, pixmap, pixmap.<span class="built_in">rect</span>());</span><br><span class="line"><span class="keyword">if</span> (!isSelected)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 图标</span></span><br><span class="line"><span class="function">QPixmap <span class="title">checkIcon</span><span class="params">(<span class="string">&quot;:/images/unselect.png&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">QRect <span class="title">checkRect</span><span class="params">(squareRect.topRight() - QPoint(SELECT_ICON_SIZE + <span class="number">5</span>, <span class="number">-5</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">QSize(SELECT_ICON_SIZE, SELECT_ICON_SIZE))</span></span>;</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(checkRect, checkIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制选中时的边框和勾选图标</span></span><br><span class="line"><span class="keyword">if</span> (isSelected) &#123;</span><br><span class="line"><span class="comment">// 蓝框</span></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">41</span>, <span class="number">95</span>, <span class="number">204</span>), <span class="number">3</span>));</span><br><span class="line">painter-&gt;<span class="built_in">drawRoundedRect</span>(squareRect, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图标</span></span><br><span class="line"><span class="function">QPixmap <span class="title">checkIcon</span><span class="params">(<span class="string">&quot;:/images/selected.png&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">QRect <span class="title">checkRect</span><span class="params">(squareRect.topRight() - QPoint(SELECT_ICON_SIZE + <span class="number">5</span>, <span class="number">-5</span>), QSize(SELECT_ICON_SIZE, SELECT_ICON_SIZE))</span></span>;</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(checkRect, checkIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isHovered)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 蓝框</span></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(<span class="built_in">QPen</span>(<span class="built_in">QColor</span>(<span class="number">41</span>, <span class="number">95</span>, <span class="number">204</span>), <span class="number">3</span>));</span><br><span class="line">painter-&gt;<span class="built_in">drawRoundedRect</span>(squareRect, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(Qt::black);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(nameRect, Qt::AlignLeft | Qt::AlignVCenter, fileName);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(dateRect, Qt::AlignLeft | Qt::AlignVCenter, fileDate);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(sizeRect, Qt::AlignLeft | Qt::AlignVCenter, fileSize);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (viewMode == QListView::ViewMode::ListMode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//listView-&gt;setSpacing(5);</span></span><br><span class="line"><span class="keyword">if</span> (isHovered)</span><br><span class="line">&#123;</span><br><span class="line">QRect <span class="built_in">fileRect</span>(option.rect.<span class="built_in">topLeft</span>(), option.rect.<span class="built_in">size</span>());</span><br><span class="line"><span class="type">int</span> borderRadius = <span class="number">10</span>; <span class="comment">// 圆角的半径</span></span><br><span class="line"></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(Qt::NoPen); <span class="comment">// 去掉边框</span></span><br><span class="line">painter-&gt;<span class="built_in">setBrush</span>(<span class="built_in">QColor</span>(<span class="number">235</span>, <span class="number">241</span>, <span class="number">255</span>)); <span class="comment">// 设置填充颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆角背景</span></span><br><span class="line">painter-&gt;<span class="built_in">drawRoundedRect</span>(fileRect, borderRadius, borderRadius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选中状态边框</span></span><br><span class="line"><span class="keyword">if</span> (isSelected) &#123;</span><br><span class="line"><span class="function">QRect <span class="title">fileRect</span><span class="params">(option.rect.topLeft(), option.rect.size())</span></span>;</span><br><span class="line"><span class="type">int</span> borderRadius = <span class="number">10</span>; <span class="comment">// 圆角的半径</span></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(Qt::NoPen);</span><br><span class="line"><span class="comment">// 设置背景颜色</span></span><br><span class="line">painter-&gt;<span class="built_in">setBrush</span>(<span class="built_in">QColor</span>(<span class="number">235</span>, <span class="number">241</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制带圆角的背景</span></span><br><span class="line">painter-&gt;<span class="built_in">drawRoundedRect</span>(fileRect, borderRadius, borderRadius);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制选中图标</span></span><br><span class="line">QRect checkIconRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">left</span>() + <span class="number">15</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, SELECT_ICON_SIZE, SELECT_ICON_SIZE);</span><br><span class="line"><span class="function">QPixmap <span class="title">checkIcon</span><span class="params">(<span class="string">&quot;:/images/selected.png&quot;</span>)</span></span>;</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(checkIconRect, checkIcon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">QRect checkIconRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">left</span>() + <span class="number">15</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, SELECT_ICON_SIZE, SELECT_ICON_SIZE);</span><br><span class="line"><span class="function">QPixmap <span class="title">checkIcon</span><span class="params">(<span class="string">&quot;:/images/unselect.png&quot;</span>)</span></span>;</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(checkIconRect, checkIcon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制区域</span></span><br><span class="line">QRect iconRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">left</span>() + <span class="number">45</span>, option.rect.<span class="built_in">top</span>() + <span class="number">7</span>, <span class="number">44</span>, <span class="number">44</span>); <span class="comment">// 图标区域</span></span><br><span class="line">QRect nameRect = <span class="built_in">QRect</span>(iconRect.<span class="built_in">right</span>() + <span class="number">40</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, <span class="number">200</span>, <span class="number">20</span>); <span class="comment">// 文件名</span></span><br><span class="line">QRect resoRect = <span class="built_in">QRect</span>(nameRect.<span class="built_in">right</span>() + <span class="number">40</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, <span class="number">100</span>, <span class="number">20</span>); <span class="comment">// 分辨率</span></span><br><span class="line">QRect dateRect = <span class="built_in">QRect</span>(resoRect.<span class="built_in">right</span>() + <span class="number">40</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, <span class="number">200</span>, <span class="number">20</span>); <span class="comment">// 日期</span></span><br><span class="line">QRect sizeRect = <span class="built_in">QRect</span>(dateRect.<span class="built_in">right</span>() + <span class="number">40</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, <span class="number">100</span>, <span class="number">20</span>); <span class="comment">// 大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制圆角图标</span></span><br><span class="line"><span class="type">int</span> borderRadius = <span class="number">10</span>;</span><br><span class="line">QPainterPath path;</span><br><span class="line">path.<span class="built_in">addRoundedRect</span>(iconRect, borderRadius, borderRadius);</span><br><span class="line"></span><br><span class="line">painter-&gt;<span class="built_in">save</span>();</span><br><span class="line"><span class="comment">// 抗锯齿</span></span><br><span class="line">painter-&gt;<span class="built_in">setRenderHint</span>(QPainter::Antialiasing, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 裁剪区域</span></span><br><span class="line">painter-&gt;<span class="built_in">setClipPath</span>(path);</span><br><span class="line">painter-&gt;<span class="built_in">drawPixmap</span>(iconRect, pixmap);</span><br><span class="line">painter-&gt;<span class="built_in">restore</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制文件名、日期和大小</span></span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(Qt::black);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(nameRect, Qt::AlignLeft | Qt::AlignVCenter, fileName);</span><br><span class="line">painter-&gt;<span class="built_in">setPen</span>(Qt::gray);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(resoRect, Qt::AlignLeft | Qt::AlignVCenter, fileReso);</span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(dateRect, Qt::AlignLeft | Qt::AlignVCenter, fileDate);</span><br><span class="line"></span><br><span class="line">painter-&gt;<span class="built_in">drawText</span>(sizeRect, Qt::AlignLeft | Qt::AlignVCenter, fileSize);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">painter-&gt;<span class="built_in">restore</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">QSize <span class="title">sizeHint</span><span class="params">(<span class="type">const</span> QStyleOptionViewItem&amp; option, <span class="type">const</span> QModelIndex&amp; index)</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line"><span class="built_in">Q_UNUSED</span>(index);</span><br><span class="line"><span class="comment">//固定大小</span></span><br><span class="line"><span class="keyword">if</span> (listView-&gt;<span class="built_in">viewMode</span>() == QListView::ViewMode::IconMode) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">QSize</span>(<span class="number">170</span>, <span class="number">170</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">QSize</span>(<span class="number">50</span>, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">editorEvent</span><span class="params">(QEvent* event, QAbstractItemModel* model, <span class="type">const</span> QStyleOptionViewItem&amp; option,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> QModelIndex&amp; index)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (event-&gt;<span class="built_in">type</span>() == QEvent::MouseButtonPress) &#123;</span><br><span class="line">QMouseEvent* mouseEvent = <span class="built_in">static_cast</span>&lt;QMouseEvent*&gt;(event);</span><br><span class="line">QListView::ViewMode viewMode = listView-&gt;<span class="built_in">viewMode</span>();</span><br><span class="line"></span><br><span class="line">QRect checkRect;</span><br><span class="line"><span class="keyword">if</span> (viewMode == QListView::ViewMode::IconMode) &#123;</span><br><span class="line">checkRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">topRight</span>() - <span class="built_in">QPoint</span>(SELECT_ICON_SIZE + <span class="number">5</span>, <span class="number">-5</span>),</span><br><span class="line"><span class="built_in">QSize</span>(SELECT_ICON_SIZE, SELECT_ICON_SIZE));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">checkRect = <span class="built_in">QRect</span>(option.rect.<span class="built_in">left</span>() + <span class="number">15</span>, option.rect.<span class="built_in">top</span>() + <span class="number">20</span>, SELECT_ICON_SIZE, SELECT_ICON_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (checkRect.<span class="built_in">contains</span>(mouseEvent-&gt;<span class="built_in">pos</span>())) &#123;</span><br><span class="line"><span class="type">bool</span> isSelected = index.<span class="built_in">data</span>(Qt::UserRole + <span class="number">15</span>).<span class="built_in">toBool</span>();</span><br><span class="line">model-&gt;<span class="built_in">setData</span>(index, !isSelected, Qt::UserRole + <span class="number">15</span>);</span><br><span class="line">QItemSelectionModel* selectionModel = listView-&gt;<span class="built_in">selectionModel</span>();</span><br><span class="line"><span class="keyword">if</span> (!isSelected) &#123;</span><br><span class="line">selectionModel-&gt;<span class="built_in">select</span>(index, QItemSelectionModel::Select);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">selectionModel-&gt;<span class="built_in">select</span>(index, QItemSelectionModel::Deselect);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> QStyledItemDelegate::<span class="built_in">editorEvent</span>(event, model, option, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">QListView* listView;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-效果图"><a href="#4-效果图" class="headerlink" title="4.效果图"></a>4.效果图</h2><p><img src="/./Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/image-20241225153907663.png" alt="image-20241225153907663"></p><p><img src="/./Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/image-20241225153943414.png" alt="image-20241225153943414"></p><p><img src="/./Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/image-20241225154833298.png" alt="image-20241225154833298"></p><p><img src="/./Qt%E9%AB%98%E6%80%A7%E8%83%BD%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6%E4%B9%8BQListView%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BC%98%E7%82%B9/image-20241225154855709.png" alt="image-20241225154855709"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt高性能列表控件之QListView的使用及优点&quot;&gt;&lt;a href=&quot;#Qt高性能列表控件之QListView的使用及优点&quot; class=&quot;headerlink&quot; title=&quot;Qt高性能列表控件之QListView的使用及优点&quot;&gt;&lt;/a&gt;Qt高性能列表控件之Q</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E4%BB%A5%E5%8F%8A%E5%8F%8D%E9%80%89/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E4%BB%A5%E5%8F%8A%E5%8F%8D%E9%80%89/</id>
    <published>2024-12-25T10:55:34.420Z</published>
    <updated>2024-12-25T08:44:01.896Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/25/QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/25/QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/</id>
    <published>2024-12-25T10:55:34.417Z</published>
    <updated>2024-12-25T09:06:37.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QCheckBox的三态复选框以及反选"><a href="#QCheckBox的三态复选框以及反选" class="headerlink" title="QCheckBox的三态复选框以及反选"></a>QCheckBox的三态复选框以及反选</h1><p>在使用这个控件的时候，需求有可能是：<strong>点击复选框实线反选，并且选中项目的时候需要显示未选中、部分选中和全选</strong>。在这个需求当中，首先想到的是直接启用三态复选框，但是点击的时候就变成了可以点三次，这就和反选冲突了。</p><h2 id="1-QCheckBox的三种状态："><a href="#1-QCheckBox的三种状态：" class="headerlink" title="1.QCheckBox的三种状态："></a>1.QCheckBox的三种状态：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">CheckState</span> &#123;</span><br><span class="line">    Unchecked,</span><br><span class="line">    PartiallyChecked,</span><br><span class="line">    Checked</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-如何启用三态复选框"><a href="#2-如何启用三态复选框" class="headerlink" title="2.如何启用三态复选框"></a>2.如何启用三态复选框</h2><p>使用setTristate(true)即可开启，使用void QCheckBox::setCheckState(<a href="../qtcore/qt.html#CheckState-enum">Qt::CheckState</a> <em>state</em>)参数为Qt::PartiallyChecked也会启用三态</p><p><img src="/./QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/image-20241225165142718.png" alt="image-20241225165142718"></p><h2 id="3-如何实现需求"><a href="#3-如何实现需求" class="headerlink" title="3.如何实现需求"></a>3.如何实现需求</h2><p>显示选中状态：选择项目的时候根据选中情况设置QCheckBox的状态（如在QListView中可以通过QItemSelectionModel::selectionChanged信号实时统计）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (selectedItems == 0)</span><br><span class="line">&#123;</span><br><span class="line">ui-&gt;checkBox_select-&gt;setCheckState(Qt::Unchecked);</span><br><span class="line">&#125;</span><br><span class="line">else if (selectedItems &lt; totalItems)</span><br><span class="line">&#123;</span><br><span class="line">ui-&gt;checkBox_select-&gt;setCheckState(Qt::PartiallyChecked);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">ui-&gt;checkBox_select-&gt;setCheckState(Qt::Checked);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反选：点击checkBox后关掉三态，当你再次触发selectionChanged时三态复选框重新启用，即可实现实时选中及反选功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">connect(ui-&gt;checkBox_select, &amp;QCheckBox::clicked, this, &amp;MainWindow::selectAll);</span><br><span class="line">void PhoneToPCPage::selectAll()</span><br><span class="line">&#123;</span><br><span class="line">ui-&gt;checkBox_select-&gt;setTristate(false);</span><br><span class="line">QListView* listView = getListView();</span><br><span class="line">if (listView == nullptr)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">QItemSelectionModel* selectionModel = listView-&gt;selectionModel();</span><br><span class="line">QAbstractItemModel* model = listView-&gt;model();</span><br><span class="line">bool selectAll = ui-&gt;checkBox_select-&gt;checkState() == Qt::Checked;</span><br><span class="line">if (selectAll) &#123;</span><br><span class="line">QItemSelection selection;</span><br><span class="line">for (int row = 0; row &lt; model-&gt;rowCount(); ++row) &#123;</span><br><span class="line">QModelIndex index = model-&gt;index(row, 0);</span><br><span class="line">selection.select(index, index);</span><br><span class="line">&#125;</span><br><span class="line">selectionModel-&gt;select(selection, QItemSelectionModel::Select);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">selectionModel-&gt;clearSelection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-效果图"><a href="#3-效果图" class="headerlink" title="3.效果图"></a>3.效果图</h2><p><img src="/./QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/image-20241225170603608.png" alt="image-20241225170603608"></p><p><img src="/./QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/image-20241225170618346.png" alt="image-20241225170618346"></p><p><img src="/./QCheckBox%E7%9A%84%E4%B8%89%E6%80%81%E5%A4%8D%E9%80%89%E6%A1%86%E5%92%8C%E5%8F%8D%E9%80%89/image-20241225170629562.png" alt="image-20241225170629562"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;QCheckBox的三态复选框以及反选&quot;&gt;&lt;a href=&quot;#QCheckBox的三态复选框以及反选&quot; class=&quot;headerlink&quot; title=&quot;QCheckBox的三态复选框以及反选&quot;&gt;&lt;/a&gt;QCheckBox的三态复选框以及反选&lt;/h1&gt;&lt;p&gt;在使</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hhh</title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/06/hhh/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/06/hhh/</id>
    <published>2024-12-06T15:58:58.000Z</published>
    <updated>2024-12-19T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/2024/12/06/hhh/404.gif" class="" width="404"><img src="/2024/12/06/hhh/image-20231106230450303-16992854916522.png" class="" title="image-20231106230450303-16992854916522">]]></content>
    
    
    <summary type="html">hhhhhhhhhhhhhhh</summary>
    
    
    
    <category term="bug" scheme="https://cpp-memory-leaks.github.io/categories/bug/"/>
    
    
  </entry>
  
  <entry>
    <title>bugRecord</title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/06/bugRecord/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/06/bugRecord/</id>
    <published>2024-12-06T14:19:47.000Z</published>
    <updated>2024-12-06T16:02:21.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Qt相关"><a href="#Qt相关" class="headerlink" title="Qt相关"></a>Qt相关</h1><h3 id="1-编码问题"><a href="#1-编码问题" class="headerlink" title="1. 编码问题"></a>1. 编码问题</h3><h4 id="1-1-乱码问题"><a href="#1-1-乱码问题" class="headerlink" title="1.1 乱码问题"></a>1.1 乱码问题</h4><p><strong>现象</strong></p><p>​编译通过、运行通过</p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231106230450303-16992854916522.png" alt="图片" title="bug"></p><p><strong>根本原因：</strong></p><p>​vs显示无乱码-&gt;源码字符集正确</p><p>​编译通过-&gt;编译字符集正确</p><p>​执行有乱码-&gt;执行字符集不正常</p><p>​源码字符集与执行字符集不一致，GCC的源码字符集与执行字符集默认是UTF-8编码，这是因为现在的Linux系统大多使用UTF-8编码。就算调整了Linux系统语言后，只是区域发生了变化，字符编码依然是UTF-8。所以我们的程序在“简体中文”与“英语”下，均能正确的显示中文字符。<br>　　MinGW中的GCC也是这样的，源码字符集与执行字符集默认是UTF-8编码。但是简体中文的Windows的默认编码是GB2312，会将printf输出UTF-8字符串误认为是GB2312，造成乱码。</p><p><strong>解决方案：</strong></p><ol><li><h5 id="源码字符集的设置"><a href="#源码字符集的设置" class="headerlink" title="源码字符集的设置"></a><strong>源码字符集的设置</strong></h5></li></ol><p>​（1）将所有的源代码格式设置为UTF-8（no Bom），VS：扩展—&gt;搜索Force UTF-8（no Bom）—&gt;关闭重启</p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231106232320714.png" alt="image-20231106232320714"></p><p>​</p><p>​（2）添加：&#x2F;source-charset:utf-8</p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231106232607624-16992855068795.png" alt="image-20231106232607624"></p><ol start="2"><li><h5 id="执行字符集的设置"><a href="#执行字符集的设置" class="headerlink" title="执行字符集的设置"></a><strong>执行字符集的设置</strong></h5>命令行添加：&#x2F;execution-charset:utf-8</li></ol><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231106233002744-16992855114728.png" alt="image-20231106233002744"></p><h4 id="1-2-由编码问题出现的报错"><a href="#1-2-由编码问题出现的报错" class="headerlink" title="1.2 由编码问题出现的报错"></a>1.2 由编码问题出现的报错</h4><p><strong>现象：</strong></p><p>​编译不通过，明显语法没有错误，编译出现大量的错误</p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231108213720896.png" alt="image-20231108213720896"></p><p><strong>根本原因：</strong></p><ol><li>源码字符集与编译字符集不一致</li></ol><p><strong>解决方案：</strong></p><p>​在命令行追加&#x2F;source-charset:utf-8 &#x2F;execution-charset:utf-8 </p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231109122230384.png" alt="image-20231109122230384"></p><h3 id="3-编译器、编译套件等问题"><a href="#3-编译器、编译套件等问题" class="headerlink" title="3.  编译器、编译套件等问题"></a>3.  编译器、编译套件等问题</h3><h4 id="1-打开项目出现错误-qmake-16968-Project-ERROR-msvc-version-conf-loaded-but-QMAKE-MSC-VER-isn’t-set"><a href="#1-打开项目出现错误-qmake-16968-Project-ERROR-msvc-version-conf-loaded-but-QMAKE-MSC-VER-isn’t-set" class="headerlink" title="1. 打开项目出现错误&gt;&gt;&gt; qmake(16968): Project ERROR: msvc-version.conf loaded but QMAKE_MSC_VER isn’t set"></a>1. 打开项目出现错误&gt;&gt;&gt; qmake(16968): Project ERROR: msvc-version.conf loaded but QMAKE_MSC_VER isn’t set</h4><p><strong>现象：</strong></p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231129220235374.png" alt="image-20231129220235374"></p><p><strong>错误原因：</strong></p><p>Qt中的版本与VS的版本不匹配</p><p>D:\Qt5.12.9\msvc2017_64\mkspecs\common\msvc-version.conf</p><p><strong>总结：</strong>在Windows系统上设置<code>QMAKE_MSC_VER</code>环境变量通常是为了告诉Qt使用的MSVC（Microsoft Visual C++）编译器的版本。这个环境变量的值应该与当前使用的Visual Studio版本相对应。</p><p><strong>解决办法：</strong></p><ol><li><strong>找到Visual Studio安装目录：</strong> 在通常情况下，Visual Studio被安装在<code>C:\Program Files (x86)\Microsoft Visual Studio</code>目录下。</li><li><strong>找到MSVC版本号：</strong> 进入Visual Studio安装目录，然后进入<code>VC\Tools\MSVC</code>目录，你会看到一个或多个以版本号命名的子目录，比如<code>14.0xxxxx</code>、<code>14.1</code>xxxxxxx、<code>14.3x</code>xxxxxx等。这个版本号就是需要设置的<code>QMAKE_MSC_VER</code>的值。<img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231129221006595.png" alt="image-20231129221006595"></li><li><strong>根据下载安装QT路径修改：msvc-version.conf配置文件</strong><br>D:\Qt\Qt5.12.9\5.12.9\msvc2017_64\mkspecs\common\msvc-version.conf</li></ol><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20231129220809867.png" alt="image-20231129220809867"></p><p>我用的是msvc_2017所有对应的msvc版本是1916</p><p><strong>对应表如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">MSC 1.0 _MSC_VER == 100</span><br><span class="line">MSC 2.0 _MSC_VER == 200</span><br><span class="line">MSC 3.0 _MSC_VER == 300</span><br><span class="line">MSC 4.0 _MSC_VER == 400</span><br><span class="line">MSC 5.0 _MSC_VER == 500</span><br><span class="line">MSC 6.0 _MSC_VER == 600</span><br><span class="line">MSC 7.0 _MSC_VER == 700</span><br><span class="line">MSVC++ 1.0 _MSC_VER == 800</span><br><span class="line">MSVC++ 2.0 _MSC_VER == 900</span><br><span class="line">MSVC++ 4.0 _MSC_VER == 1000 (Developer Studio 4.0)</span><br><span class="line">MSVC++ 4.2 _MSC_VER == 1020 (Developer Studio 4.2)</span><br><span class="line">MSVC++ 5.0 _MSC_VER == 1100 (Visual Studio 97 version 5.0)</span><br><span class="line">MSVC++ 6.0 _MSC_VER == 1200 (Visual Studio 6.0 version 6.0)</span><br><span class="line">MSVC++ 7.0 _MSC_VER == 1300 (Visual Studio .NET 2002 version 7.0)</span><br><span class="line">MSVC++ 7.1 _MSC_VER == 1310 (Visual Studio .NET 2003 version 7.1)</span><br><span class="line">MSVC++ 8.0 _MSC_VER == 1400 (Visual Studio 2005 version 8.0)</span><br><span class="line">MSVC++ 9.0 _MSC_VER == 1500 (Visual Studio 2008 version 9.0)</span><br><span class="line">MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010 version 10.0)</span><br><span class="line">MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012 version 11.0)</span><br><span class="line">MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013 version 12.0)</span><br><span class="line">MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015 version 14.0)</span><br><span class="line">MSVC++ 14.1 _MSC_VER == 1910 (Visual Studio 2017 version 15.0)</span><br><span class="line">MSVC++ 14.11 _MSC_VER == 1911 (Visual Studio 2017 version 15.3)</span><br><span class="line">MSVC++ 14.12 _MSC_VER == 1912 (Visual Studio 2017 version 15.5)</span><br><span class="line">MSVC++ 14.13 _MSC_VER == 1913 (Visual Studio 2017 version 15.6)</span><br><span class="line">MSVC++ 14.14 _MSC_VER == 1914 (Visual Studio 2017 version 15.7)</span><br><span class="line">MSVC++ 14.15 _MSC_VER == 1915 (Visual Studio 2017 version 15.8)</span><br><span class="line">MSVC++ 14.16 _MSC_VER == 1916 (Visual Studio 2017 version 15.9)</span><br><span class="line">MSVC++ 14.2 _MSC_VER == 1920 (Visual Studio 2019 Version 16.0)</span><br><span class="line">MSVC++ 14.21 _MSC_VER == 1921 (Visual Studio 2019 Version 16.1)</span><br><span class="line">MSVC++ 14.22 _MSC_VER == 1922 (Visual Studio 2019 Version 16.2)</span><br></pre></td></tr></table></figure><h4 id="2-编译套件配置路径错误导致"><a href="#2-编译套件配置路径错误导致" class="headerlink" title="2.  编译套件配置路径错误导致"></a>2.  编译套件配置路径错误导致</h4><h3 id="4-QT-VS-FFmpeg编译找不到库"><a href="#4-QT-VS-FFmpeg编译找不到库" class="headerlink" title="4.  QT+VS+FFmpeg编译找不到库"></a>4.  QT+VS+FFmpeg编译找不到库</h3><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106104221786.png" alt="image-20240106104221786"></p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106104320454.png" alt="image-20240106104320454"></p><p>项目-&gt;属性-&gt;C&#x2F;C++-&gt;附加包含目录</p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106104527988.png" alt="image-20240106104527988"></p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106104634876.png" alt="image-20240106104634876"></p><p>再不行就将FFmpeg的bin目录下的所有文件*.dll都拷贝到我们的运行环境下（.exe所在的目录）</p><p>动态库下载路径<a href="https://github.com/BtbN/FFmpeg-Builds/releases?page=4">https://github.com/BtbN/FFmpeg-Builds/releases?page=4</a></p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106113003741.png" alt="image-20240106113003741"></p><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/image-20240106113104030.png" alt="image-20240106113104030"></p><h3 id="5-MySQL-—–-ERR-1273-Unknown-collation-‘utf8mb4-0900-ai-ci’"><a href="#5-MySQL-—–-ERR-1273-Unknown-collation-‘utf8mb4-0900-ai-ci’" class="headerlink" title="5.  MySQL —–[ERR] 1273 - Unknown collation: ‘utf8mb4_0900_ai_ci’"></a>5.  MySQL —–[ERR] 1273 - Unknown collation: ‘utf8mb4_0900_ai_ci’</h3><p>原因：这是8.0以上的新版本数据库的编码，旧版本不支持</p><p>更新数据库版本或者更改为旧版本支持的编码格式</p><p>推荐：更改编码格式</p><p>复制数据库脚本到word，全部替换为utf8mb4_unicode_ci</p><h3 id="6-SpringBoot项目启动命令过长！-Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-via-JAR-manifest-or-via-a-classpath-file-and-rerun"><a href="#6-SpringBoot项目启动命令过长！-Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-via-JAR-manifest-or-via-a-classpath-file-and-rerun" class="headerlink" title="6.  SpringBoot项目启动命令过长！-Error running Application. Command line is too long. Shorten the command line via JAR manifest or via a classpath file and rerun"></a>6.  SpringBoot项目启动命令过长！-Error running Application. Command line is too long. Shorten the command line via JAR manifest or via a classpath file and rerun</h3><ol><li>点击项目启动配置项</li><li><em>shorten command line</em> 选项选择 JAR manifest 或者 classpath file 选项</li><li>重新启动工程运行即可</li></ol><p><img src="https://gitee.com/ou-qingshen/markdown/raw/master/1709906746564-f5718283-4321-4e77-982e-a4c22333aa3a.png"></p><h3 id="7-sha256加盐加密踩坑"><a href="#7-sha256加盐加密踩坑" class="headerlink" title="7. sha256加盐加密踩坑"></a>7. sha256加盐加密踩坑</h3><p>注册：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QByteArray salt = QCryptographicHash::<span class="built_in">hash</span>(QByteArray::<span class="built_in">number</span>(QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">1000000000</span>)), QCryptographicHash::Sha256);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; salt &lt;&lt; endl;</span><br><span class="line">QByteArray passwordHash = QCryptographicHash::<span class="built_in">hash</span>((password + salt).<span class="built_in">toUtf8</span>(), QCryptographicHash::Sha256);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; passwordHash;</span><br><span class="line"></span><br><span class="line">QString sql = <span class="string">&quot;INSERT INTO users (username, salt ,password_hash) VALUES (:username,:salt, :password_hash )&quot;</span>;</span><br><span class="line">QSqlQuery query;</span><br><span class="line"></span><br><span class="line">query.<span class="built_in">prepare</span>(sql);</span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:username&quot;</span>, userName);</span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:salt&quot;</span>, salt.<span class="built_in">toHex</span>()); </span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:password_hash&quot;</span>, passwordHash.<span class="built_in">toHex</span>());</span><br></pre></td></tr></table></figure><p>注册时存储在数据库中的salt是经过了从ByteArray经过toHex()的转换，登录的时候不要将salt取出来后直接toByteArray()否则这样的盐值是无法读取的，而是需要将salt以字符串的形式读取，然后使用ByteArray::fromHex()转换为ByteArray</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> QByteArray storedHash = query.<span class="built_in">value</span>(<span class="number">0</span>).<span class="built_in">toByteArray</span>();</span><br><span class="line"><span class="type">const</span> QString salt111 = query.<span class="built_in">value</span>(<span class="number">1</span>).<span class="built_in">toString</span>();</span><br><span class="line"><span class="type">const</span> QByteArray salt = QByteArray::<span class="built_in">fromHex</span>(salt<span class="number">111.</span><span class="built_in">toUtf8</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用相同的哈希算法和盐值对用户提供的密码进行哈希处理  </span></span><br><span class="line">QByteArray passwordHash = QCryptographicHash::<span class="built_in">hash</span>((password + salt).<span class="built_in">toUtf8</span>(), QCryptographicHash::Sha256).<span class="built_in">toHex</span>();</span><br><span class="line"><span class="comment">// 比较存储的哈希值和计算的哈希值是否相同  </span></span><br><span class="line"><span class="keyword">if</span> (passwordHash==storedHash) &#123;</span><br><span class="line">    <span class="comment">// 哈希值匹配，登录成功  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Qtimer踩坑"><a href="#8-Qtimer踩坑" class="headerlink" title="8.  Qtimer踩坑"></a>8.  Qtimer踩坑</h3><p>点击 <code>startBtn</code> 时，如果 <code>timer</code> 已经处于活动状态（即已经在计时），那么它不会停止并重新开始计时，而是会继续计时直到达到设定的时间间隔（在这个例子中是1000毫秒）。如果希望点击 <code>startBtn</code> 时能够重置计时器（即无论它是否正在计时，都停止当前计时并重新开始），需要在启动计时器之前先调用 <code>stop()</code> 方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QTimer* timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer, &amp;QTimer::timeout, []() &#123; <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;hhhhhhhhhh&quot;</span>; &#125;);</span><br><span class="line"><span class="built_in">connect</span>(ui.stopBtn, &amp;QPushButton::clicked, timer, &amp;QTimer::stop);</span><br><span class="line"><span class="built_in">connect</span>(ui.startBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, [<span class="keyword">this</span>, timer]() &#123;</span><br><span class="line">    <span class="comment">// 无论timer是否正在计时，都先停止它  </span></span><br><span class="line">    timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    <span class="comment">// 然后重新启动计时器  </span></span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="9-Windows文件系统重定向问题"><a href="#9-Windows文件系统重定向问题" class="headerlink" title="9. Windows文件系统重定向问题"></a>9. Windows文件系统重定向问题</h3><p>现象：</p><p>今天做项目的时候发现了一个奇怪的问题，我的项目是32位的Qt程序，需求是要将一个程序运行目录下的一个dll文件拷贝到C:&#x2F;Windows&#x2F;System32目录下，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QString sourcePath = QApplication::<span class="built_in">applicationDirPath</span>() + <span class="string">&quot;/wintun.dll&quot;</span>;</span><br><span class="line">QString destinationPath = <span class="string">&quot;C:/Windows/System32/wintun.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isDestinationExists = QFile::<span class="built_in">exists</span>(destinationPath);</span><br><span class="line"><span class="type">bool</span> isSourceExists = QFile::<span class="built_in">exists</span>(sourcePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isSourceExists) QFile::<span class="built_in">copy</span>(sourcePath, destinationPath);</span><br></pre></td></tr></table></figure><p>这是很简单的一个代码，仅仅是将文件简单的复制到目标位置，但是在目标路径上死活没看到文件，isDestinationExists和isSourceExists都是true，执行QFile::copy(sourcePath, destinationPath)也是true，当我是用remove()函数尝试删除destinationPath文件后，再次运行，isDestinationExists返回的是false，证明目标文件已经被删除了，在C盘的其他目录下如C:&#x2F;Windows&#x2F;System都是成功的能拷贝成功，而且QFile::copy(sourcePath, destinationPath)也是true，使用的是管理员打开，证明不存在权限问题。</p><p>这是由于Windows的文件系统重定向导致的。%windir%\System32 目录是为 64 位 Windows 上的 64 位应用程序保留的。 创建 64 位版本的 DLL 时，大多数 DLL 文件名未更改，因此 32 位版本的 DLL 存储在不同的目录中。 WOW64 通过使用 <em>文件系统重定向程序</em>来隐藏此差异。</p><p>在大多数情况下，每当 32 位应用程序尝试访问 %windir%\System32、%windir%\lastgood\system32 或 %windir%\regedit.exe时，访问都会重定向到特定于体系结构的路径。</p><p>如：</p><ol><li>有一个 64 位的 DLL 文件放在 <code>C:\Windows\System32\example.dll</code>，同时有一个 32 位的 DLL 文件放在 <code>C:\Windows\SysWOW64\example.dll</code>。</li><li>当一个 32 位应用程序尝试 <code>LoadLibrary</code> 去加载 <code>C:\Windows\System32\example.dll</code>，实际上它会加载 <code>C:\Windows\SysWOW64\example.dll</code>，因为系统的重定向机制将请求指向了 <code>SysWOW64</code>。</li></ol><p>如图所示：</p><p><img src="F:/Tools/hexo/blog/source/_posts/image-20240929214652413.png" alt="image-20240929214652413"></p><p>而我的程序，也正是被强大的Windows重定向到了C:\Windows\SysWOW64目录下</p><p>解决办法：</p><ol><li>64位程序访问32位系统目录：若要检索 32 位系统目录的名称，64 位应用程序应使用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/wow64apiset/nf-wow64apiset-getsystemwow64directory2a"><strong>GetSystemWow64Directory2</strong></a> 函数 (Windows 10版本 1511) 或 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/wow64apiset/nf-wow64apiset-getsystemwow64directorya"><strong>GetSystemWow64Directory</strong></a> 函数。</li><li>32位程序访问64位系统目录：<strong>32 位应用程序可以通过将 %windir%\Sysnative 替换为 %windir%\System32 来访问本机系统目录。 WOW64 将 Sysnative 识别为用于指示文件系统不应重定向访问的特殊别名，官方建议使用此机制绕过文件系统重定向。</strong> 应用程序也可以使用 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wow64apiset/nf-wow64apiset-wow64disablewow64fsredirection"><strong>Wow64DisableWow64FsRedirection、Wow64EnableWow64FsRedirection</strong></a> 和 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wow64apiset/nf-wow64apiset-wow64revertwow64fsredirection"><strong>Wow64RevertWow64FsRedirection 函数来控制 WOW64</strong></a> 文件系统重定向程序。 禁用文件系统重定向会影响调用线程执行的所有文件操作，因此仅当单个 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><strong>CreateFile</strong></a> 调用需要时才禁用它，并在函数返回后立即重新启用。 长时间禁用文件系统重定向可能会阻止 32 位应用程序加载系统 DLL，从而导致应用程序失败。</li></ol><p>在我们的例子当中，根据官方建议的做法，32位程序想要访问64位的系统目录，需要通过 <code>C:\Windows\Sysnative\example.dll</code> 访问。</p><p>第二种做法是利用windows的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wow64Redirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PVOID OldValue;</span><br><span class="line">    <span class="comment">//禁止文件系统重定向</span></span><br><span class="line">   <span class="built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue)) &#123;</span><br><span class="line">       <span class="comment">//现在进入的是C:\\Windows\\System32目录下</span></span><br><span class="line">        <span class="keyword">if</span> (QFile::<span class="built_in">exists</span>(<span class="string">&quot;C:\\Windows\\System32\\wintun.dll&quot;</span>)) &#123;</span><br><span class="line">        QFile::<span class="built_in">copy</span>(QFile::<span class="built_in">copy</span>( QApplication::<span class="built_in">applicationDirPath</span>() + <span class="string">&quot;/wintun.dll&quot;</span>, <span class="string">&quot;C:\\Windows\\System32\\wintun.dll&quot;</span>););</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//打开文件系统重定向</span></span><br><span class="line">    <span class="built_in">Wow64RevertWow64FsRedirection</span>(OldValue);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Qt相关&quot;&gt;&lt;a href=&quot;#Qt相关&quot; class=&quot;headerlink&quot; title=&quot;Qt相关&quot;&gt;&lt;/a&gt;Qt相关&lt;/h1&gt;&lt;h3 id=&quot;1-编码问题&quot;&gt;&lt;a href=&quot;#1-编码问题&quot; class=&quot;headerlink&quot; title=&quot;1. 编码</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/06/Bug/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/06/Bug/</id>
    <published>2024-12-05T16:15:59.692Z</published>
    <updated>2024-12-19T12:56:21.857Z</updated>
    
    <content type="html"><![CDATA[<p>title: 我的页面标题<br>date: 2024-12-19<br>type: page   # 这里根据你的页面类型选择，比如页面或文章<br>updated: 2024-12-20  # 如果有更新，可以在这里填写<br>description: 这是我的页面描述<br>keywords: hexo, anzhiyu, 配置, 前端<br>comments: true  # 是否显示评论模块<br>top_img: Bug&#x2F;image-20231106230450303-16992854916522.png  # 顶部图片路径<br>mathjax: true  # 如果页面需要显示 MathJax<br>katex: false  # 如果页面需要显示 KaTeX<br>aside: true  # 是否显示侧边栏<br>aplayer: true  # 是否启用音乐播放器<br>highlight_shrink: false  # 是否启用代码框折叠功能<br>top_single_background: Bug&#x2F;image-20231106230450303-16992854916522.png # 顶部模块背景图片</p><h1 id="Qt相关"><a href="#Qt相关" class="headerlink" title="Qt相关"></a>Qt相关</h1><h3 id="1-编码问题"><a href="#1-编码问题" class="headerlink" title="1. 编码问题"></a>1. 编码问题</h3><h4 id="1-1-乱码问题"><a href="#1-1-乱码问题" class="headerlink" title="1.1 乱码问题"></a>1.1 乱码问题</h4><p><strong>现象</strong></p><p>​编译通过、运行通过</p><img src="/2024/12/06/Bug/image-20231106230450303-16992854916522.png" class="" title="image-20231106230450303"><p><strong>根本原因：</strong></p><p>​vs显示无乱码-&gt;源码字符集正确</p><p>​编译通过-&gt;编译字符集正确</p><p>​执行有乱码-&gt;执行字符集不正常</p><p>​源码字符集与执行字符集不一致，GCC的源码字符集与执行字符集默认是UTF-8编码，这是因为现在的Linux系统大多使用UTF-8编码。就算调整了Linux系统语言后，只是区域发生了变化，字符编码依然是UTF-8。所以我们的程序在“简体中文”与“英语”下，均能正确的显示中文字符。<br>　　MinGW中的GCC也是这样的，源码字符集与执行字符集默认是UTF-8编码。但是简体中文的Windows的默认编码是GB2312，会将printf输出UTF-8字符串误认为是GB2312，造成乱码。</p><p><strong>解决方案：</strong></p><ol><li><h5 id="源码字符集的设置"><a href="#源码字符集的设置" class="headerlink" title="源码字符集的设置"></a><strong>源码字符集的设置</strong></h5></li></ol><p>​（1）将所有的源代码格式设置为UTF-8（no Bom），VS：扩展—&gt;搜索Force UTF-8（no Bom）—&gt;关闭重启</p><img src="/2024/12/06/Bug/image-20231106232320714.png" class="" title="image-20231106232320714"><p>​</p><p>​（2）添加：&#x2F;source-charset:utf-8</p><img src="/2024/12/06/Bug/image-20231106232607624-16992855068795.png" class="" title="image-20231106232607624"><ol start="2"><li><h5 id="执行字符集的设置"><a href="#执行字符集的设置" class="headerlink" title="执行字符集的设置"></a><strong>执行字符集的设置</strong></h5>命令行添加：&#x2F;execution-charset:utf-8</li></ol><img src="/2024/12/06/Bug/image-20231106233002744-16992855114728.png" class="" title="image-20231106233002744"><h4 id="1-2-由编码问题出现的报错"><a href="#1-2-由编码问题出现的报错" class="headerlink" title="1.2 由编码问题出现的报错"></a>1.2 由编码问题出现的报错</h4><p><strong>现象：</strong></p><p>​编译不通过，明显语法没有错误，编译出现大量的错误</p><img src="/2024/12/06/Bug/image-20231108213720896.png" class="" title="image-20231108213720896"><p><strong>根本原因：</strong></p><ol><li>源码字符集与编译字符集不一致</li></ol><p><strong>解决方案：</strong></p><p>​在命令行追加&#x2F;source-charset:utf-8 &#x2F;execution-charset:utf-8 </p><img src="/2024/12/06/Bug/image-20231109122230384.png" class="" title="image-20231109122230384"><h3 id="3-编译器、编译套件等问题"><a href="#3-编译器、编译套件等问题" class="headerlink" title="3.  编译器、编译套件等问题"></a>3.  编译器、编译套件等问题</h3><h4 id="1-打开项目出现错误-qmake-16968-Project-ERROR-msvc-version-conf-loaded-but-QMAKE-MSC-VER-isn’t-set"><a href="#1-打开项目出现错误-qmake-16968-Project-ERROR-msvc-version-conf-loaded-but-QMAKE-MSC-VER-isn’t-set" class="headerlink" title="1. 打开项目出现错误&gt;&gt;&gt; qmake(16968): Project ERROR: msvc-version.conf loaded but QMAKE_MSC_VER isn’t set"></a>1. 打开项目出现错误&gt;&gt;&gt; qmake(16968): Project ERROR: msvc-version.conf loaded but QMAKE_MSC_VER isn’t set</h4><p><strong>现象：</strong></p><img src="/2024/12/06/Bug/image-20231129220235374.png" class="" title="image-20231129220235374"><p><strong>错误原因：</strong></p><p>Qt中的版本与VS的版本不匹配</p><p>D:\Qt5.12.9\msvc2017_64\mkspecs\common\msvc-version.conf</p><p><strong>总结：</strong>在Windows系统上设置<code>QMAKE_MSC_VER</code>环境变量通常是为了告诉Qt使用的MSVC（Microsoft Visual C++）编译器的版本。这个环境变量的值应该与当前使用的Visual Studio版本相对应。</p><p><strong>解决办法：</strong></p><ol><li><strong>找到Visual Studio安装目录：</strong> 在通常情况下，Visual Studio被安装在<code>C:\Program Files (x86)\Microsoft Visual Studio</code>目录下。</li><li><strong>找到MSVC版本号：</strong> 进入Visual Studio安装目录，然后进入<code>VC\Tools\MSVC</code>目录，你会看到一个或多个以版本号命名的子目录，比如<code>14.0xxxxx</code>、<code>14.1</code>xxxxxxx、<code>14.3x</code>xxxxxx等。这个版本号就是需要设置的<code>QMAKE_MSC_VER</code>的值。<img src="/2024/12/06/Bug/image-20231129221006595.png" class="" title="image-20231129221006595"></li><li><strong>根据下载安装QT路径修改：msvc-version.conf配置文件</strong><br>D:\Qt\Qt5.12.9\5.12.9\msvc2017_64\mkspecs\common\msvc-version.conf</li></ol><img src="/2024/12/06/Bug/image-20231129220809867.png" class="" title="image-20231129220809867"><p>我用的是msvc_2017所有对应的msvc版本是1916</p><p><strong>对应表如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">MSC 1.0 _MSC_VER == 100</span><br><span class="line">MSC 2.0 _MSC_VER == 200</span><br><span class="line">MSC 3.0 _MSC_VER == 300</span><br><span class="line">MSC 4.0 _MSC_VER == 400</span><br><span class="line">MSC 5.0 _MSC_VER == 500</span><br><span class="line">MSC 6.0 _MSC_VER == 600</span><br><span class="line">MSC 7.0 _MSC_VER == 700</span><br><span class="line">MSVC++ 1.0 _MSC_VER == 800</span><br><span class="line">MSVC++ 2.0 _MSC_VER == 900</span><br><span class="line">MSVC++ 4.0 _MSC_VER == 1000 (Developer Studio 4.0)</span><br><span class="line">MSVC++ 4.2 _MSC_VER == 1020 (Developer Studio 4.2)</span><br><span class="line">MSVC++ 5.0 _MSC_VER == 1100 (Visual Studio 97 version 5.0)</span><br><span class="line">MSVC++ 6.0 _MSC_VER == 1200 (Visual Studio 6.0 version 6.0)</span><br><span class="line">MSVC++ 7.0 _MSC_VER == 1300 (Visual Studio .NET 2002 version 7.0)</span><br><span class="line">MSVC++ 7.1 _MSC_VER == 1310 (Visual Studio .NET 2003 version 7.1)</span><br><span class="line">MSVC++ 8.0 _MSC_VER == 1400 (Visual Studio 2005 version 8.0)</span><br><span class="line">MSVC++ 9.0 _MSC_VER == 1500 (Visual Studio 2008 version 9.0)</span><br><span class="line">MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010 version 10.0)</span><br><span class="line">MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012 version 11.0)</span><br><span class="line">MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013 version 12.0)</span><br><span class="line">MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015 version 14.0)</span><br><span class="line">MSVC++ 14.1 _MSC_VER == 1910 (Visual Studio 2017 version 15.0)</span><br><span class="line">MSVC++ 14.11 _MSC_VER == 1911 (Visual Studio 2017 version 15.3)</span><br><span class="line">MSVC++ 14.12 _MSC_VER == 1912 (Visual Studio 2017 version 15.5)</span><br><span class="line">MSVC++ 14.13 _MSC_VER == 1913 (Visual Studio 2017 version 15.6)</span><br><span class="line">MSVC++ 14.14 _MSC_VER == 1914 (Visual Studio 2017 version 15.7)</span><br><span class="line">MSVC++ 14.15 _MSC_VER == 1915 (Visual Studio 2017 version 15.8)</span><br><span class="line">MSVC++ 14.16 _MSC_VER == 1916 (Visual Studio 2017 version 15.9)</span><br><span class="line">MSVC++ 14.2 _MSC_VER == 1920 (Visual Studio 2019 Version 16.0)</span><br><span class="line">MSVC++ 14.21 _MSC_VER == 1921 (Visual Studio 2019 Version 16.1)</span><br><span class="line">MSVC++ 14.22 _MSC_VER == 1922 (Visual Studio 2019 Version 16.2)</span><br></pre></td></tr></table></figure><h4 id="2-编译套件配置路径错误导致"><a href="#2-编译套件配置路径错误导致" class="headerlink" title="2.  编译套件配置路径错误导致"></a>2.  编译套件配置路径错误导致</h4><h3 id="4-QT-VS-FFmpeg编译找不到库"><a href="#4-QT-VS-FFmpeg编译找不到库" class="headerlink" title="4.  QT+VS+FFmpeg编译找不到库"></a>4.  QT+VS+FFmpeg编译找不到库</h3><img src="/2024/12/06/Bug/image-20240106104221786.png" class="" title="image-20240106104221786"><img src="/2024/12/06/Bug/image-20240106104320454.png" class="" title="image-20240106104320454"><p>项目-&gt;属性-&gt;C&#x2F;C++-&gt;附加包含目录</p><img src="/2024/12/06/Bug/image-20240106104527988.png" class="" title="image-20240106104527988"><img src="/2024/12/06/Bug/image-20240106104634876.png" class="" title="image-20240106104634876"><p>再不行就将FFmpeg的bin目录下的所有文件*.dll都拷贝到我们的运行环境下（.exe所在的目录）</p><p>动态库下载路径<a href="https://github.com/BtbN/FFmpeg-Builds/releases?page=4">https://github.com/BtbN/FFmpeg-Builds/releases?page=4</a></p><img src="/2024/12/06/Bug/image-20240106113003741.png" class="" title="image-20240106113003741"><img src="/2024/12/06/Bug/image-20240106113104030.png" class="" title="image-20240106113104030"><h3 id="5-MySQL-—–-ERR-1273-Unknown-collation-‘utf8mb4-0900-ai-ci’"><a href="#5-MySQL-—–-ERR-1273-Unknown-collation-‘utf8mb4-0900-ai-ci’" class="headerlink" title="5.  MySQL —–[ERR] 1273 - Unknown collation: ‘utf8mb4_0900_ai_ci’"></a>5.  MySQL —–[ERR] 1273 - Unknown collation: ‘utf8mb4_0900_ai_ci’</h3><p>原因：这是8.0以上的新版本数据库的编码，旧版本不支持</p><p>更新数据库版本或者更改为旧版本支持的编码格式</p><p>推荐：更改编码格式</p><p>复制数据库脚本到word，全部替换为utf8mb4_unicode_ci</p><h3 id="6-SpringBoot项目启动命令过长！-Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-via-JAR-manifest-or-via-a-classpath-file-and-rerun"><a href="#6-SpringBoot项目启动命令过长！-Error-running-Application-Command-line-is-too-long-Shorten-the-command-line-via-JAR-manifest-or-via-a-classpath-file-and-rerun" class="headerlink" title="6.  SpringBoot项目启动命令过长！-Error running Application. Command line is too long. Shorten the command line via JAR manifest or via a classpath file and rerun"></a>6.  SpringBoot项目启动命令过长！-Error running Application. Command line is too long. Shorten the command line via JAR manifest or via a classpath file and rerun</h3><ol><li>点击项目启动配置项</li><li><em>shorten command line</em> 选项选择 JAR manifest 或者 classpath file 选项</li><li>重新启动工程运行即可</li></ol><img src="/2024/12/06/Bug/1709906746564-f5718283-4321-4e77-982e-a4c22333aa3a.png" class=""><h3 id="7-sha256加盐加密踩坑"><a href="#7-sha256加盐加密踩坑" class="headerlink" title="7. sha256加盐加密踩坑"></a>7. sha256加盐加密踩坑</h3><p>注册：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QByteArray salt = QCryptographicHash::<span class="built_in">hash</span>(QByteArray::<span class="built_in">number</span>(QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">1000000000</span>)), QCryptographicHash::Sha256);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; salt &lt;&lt; endl;</span><br><span class="line">QByteArray passwordHash = QCryptographicHash::<span class="built_in">hash</span>((password + salt).<span class="built_in">toUtf8</span>(), QCryptographicHash::Sha256);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; passwordHash;</span><br><span class="line"></span><br><span class="line">QString sql = <span class="string">&quot;INSERT INTO users (username, salt ,password_hash) VALUES (:username,:salt, :password_hash )&quot;</span>;</span><br><span class="line">QSqlQuery query;</span><br><span class="line"></span><br><span class="line">query.<span class="built_in">prepare</span>(sql);</span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:username&quot;</span>, userName);</span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:salt&quot;</span>, salt.<span class="built_in">toHex</span>()); </span><br><span class="line">query.<span class="built_in">bindValue</span>(<span class="string">&quot;:password_hash&quot;</span>, passwordHash.<span class="built_in">toHex</span>());</span><br></pre></td></tr></table></figure><p>注册时存储在数据库中的salt是经过了从ByteArray经过toHex()的转换，登录的时候不要将salt取出来后直接toByteArray()否则这样的盐值是无法读取的，而是需要将salt以字符串的形式读取，然后使用ByteArray::fromHex()转换为ByteArray</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> QByteArray storedHash = query.<span class="built_in">value</span>(<span class="number">0</span>).<span class="built_in">toByteArray</span>();</span><br><span class="line"><span class="type">const</span> QString salt111 = query.<span class="built_in">value</span>(<span class="number">1</span>).<span class="built_in">toString</span>();</span><br><span class="line"><span class="type">const</span> QByteArray salt = QByteArray::<span class="built_in">fromHex</span>(salt<span class="number">111.</span><span class="built_in">toUtf8</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用相同的哈希算法和盐值对用户提供的密码进行哈希处理  </span></span><br><span class="line">QByteArray passwordHash = QCryptographicHash::<span class="built_in">hash</span>((password + salt).<span class="built_in">toUtf8</span>(), QCryptographicHash::Sha256).<span class="built_in">toHex</span>();</span><br><span class="line"><span class="comment">// 比较存储的哈希值和计算的哈希值是否相同  </span></span><br><span class="line"><span class="keyword">if</span> (passwordHash==storedHash) &#123;</span><br><span class="line">    <span class="comment">// 哈希值匹配，登录成功  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-Qtimer踩坑"><a href="#8-Qtimer踩坑" class="headerlink" title="8.  Qtimer踩坑"></a>8.  Qtimer踩坑</h3><p>点击 <code>startBtn</code> 时，如果 <code>timer</code> 已经处于活动状态（即已经在计时），那么它不会停止并重新开始计时，而是会继续计时直到达到设定的时间间隔（在这个例子中是1000毫秒）。如果希望点击 <code>startBtn</code> 时能够重置计时器（即无论它是否正在计时，都停止当前计时并重新开始），需要在启动计时器之前先调用 <code>stop()</code> 方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QTimer* timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(timer, &amp;QTimer::timeout, []() &#123; <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;hhhhhhhhhh&quot;</span>; &#125;);</span><br><span class="line"><span class="built_in">connect</span>(ui.stopBtn, &amp;QPushButton::clicked, timer, &amp;QTimer::stop);</span><br><span class="line"><span class="built_in">connect</span>(ui.startBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, [<span class="keyword">this</span>, timer]() &#123;</span><br><span class="line">    <span class="comment">// 无论timer是否正在计时，都先停止它  </span></span><br><span class="line">    timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">    <span class="comment">// 然后重新启动计时器  </span></span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="9-Windows文件系统重定向问题"><a href="#9-Windows文件系统重定向问题" class="headerlink" title="9. Windows文件系统重定向问题"></a>9. Windows文件系统重定向问题</h3><p>现象：</p><p>今天做项目的时候发现了一个奇怪的问题，我的项目是32位的Qt程序，需求是要将一个程序运行目录下的一个dll文件拷贝到C:&#x2F;Windows&#x2F;System32目录下，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QString sourcePath = QApplication::<span class="built_in">applicationDirPath</span>() + <span class="string">&quot;/wintun.dll&quot;</span>;</span><br><span class="line">QString destinationPath = <span class="string">&quot;C:/Windows/System32/wintun.dll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> isDestinationExists = QFile::<span class="built_in">exists</span>(destinationPath);</span><br><span class="line"><span class="type">bool</span> isSourceExists = QFile::<span class="built_in">exists</span>(sourcePath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isSourceExists) QFile::<span class="built_in">copy</span>(sourcePath, destinationPath);</span><br></pre></td></tr></table></figure><p>这是很简单的一个代码，仅仅是将文件简单的复制到目标位置，但是在目标路径上死活没看到文件，isDestinationExists和isSourceExists都是true，执行QFile::copy(sourcePath, destinationPath)也是true，当我是用remove()函数尝试删除destinationPath文件后，再次运行，isDestinationExists返回的是false，证明目标文件已经被删除了，在C盘的其他目录下如C:&#x2F;Windows&#x2F;System都是成功的能拷贝成功，而且QFile::copy(sourcePath, destinationPath)也是true，使用的是管理员打开，证明不存在权限问题。</p><p>这是由于Windows的文件系统重定向导致的。%windir%\System32 目录是为 64 位 Windows 上的 64 位应用程序保留的。 创建 64 位版本的 DLL 时，大多数 DLL 文件名未更改，因此 32 位版本的 DLL 存储在不同的目录中。 WOW64 通过使用 <em>文件系统重定向程序</em>来隐藏此差异。</p><p>在大多数情况下，每当 32 位应用程序尝试访问 %windir%\System32、%windir%\lastgood\system32 或 %windir%\regedit.exe时，访问都会重定向到特定于体系结构的路径。</p><p>如：</p><ol><li>有一个 64 位的 DLL 文件放在 <code>C:\Windows\System32\example.dll</code>，同时有一个 32 位的 DLL 文件放在 <code>C:\Windows\SysWOW64\example.dll</code>。</li><li>当一个 32 位应用程序尝试 <code>LoadLibrary</code> 去加载 <code>C:\Windows\System32\example.dll</code>，实际上它会加载 <code>C:\Windows\SysWOW64\example.dll</code>，因为系统的重定向机制将请求指向了 <code>SysWOW64</code>。</li></ol><p>如图所示：</p><img src="/2024/12/06/Bug/image-20240929214652413.png" class="" title="image-20240929214652413"><p>而我的程序，也正是被强大的Windows重定向到了C:\Windows\SysWOW64目录下</p><p>解决办法：</p><ol><li>64位程序访问32位系统目录：若要检索 32 位系统目录的名称，64 位应用程序应使用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/wow64apiset/nf-wow64apiset-getsystemwow64directory2a"><strong>GetSystemWow64Directory2</strong></a> 函数 (Windows 10版本 1511) 或 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/wow64apiset/nf-wow64apiset-getsystemwow64directorya"><strong>GetSystemWow64Directory</strong></a> 函数。</li><li>32位程序访问64位系统目录：<strong>32 位应用程序可以通过将 %windir%\Sysnative 替换为 %windir%\System32 来访问本机系统目录。 WOW64 将 Sysnative 识别为用于指示文件系统不应重定向访问的特殊别名，官方建议使用此机制绕过文件系统重定向。</strong> 应用程序也可以使用 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wow64apiset/nf-wow64apiset-wow64disablewow64fsredirection"><strong>Wow64DisableWow64FsRedirection、Wow64EnableWow64FsRedirection</strong></a> 和 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/wow64apiset/nf-wow64apiset-wow64revertwow64fsredirection"><strong>Wow64RevertWow64FsRedirection 函数来控制 WOW64</strong></a> 文件系统重定向程序。 禁用文件系统重定向会影响调用线程执行的所有文件操作，因此仅当单个 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><strong>CreateFile</strong></a> 调用需要时才禁用它，并在函数返回后立即重新启用。 长时间禁用文件系统重定向可能会阻止 32 位应用程序加载系统 DLL，从而导致应用程序失败。</li></ol><p>在我们的例子当中，根据官方建议的做法，32位程序想要访问64位的系统目录，需要通过 <code>C:\Windows\Sysnative\example.dll</code> 访问。</p><p>第二种做法是利用windows的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Wow64Redirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PVOID OldValue;</span><br><span class="line">    <span class="comment">//禁止文件系统重定向</span></span><br><span class="line">   <span class="built_in">Wow64DisableWow64FsRedirection</span>(&amp;OldValue)) &#123;</span><br><span class="line">       <span class="comment">//现在进入的是C:\\Windows\\System32目录下</span></span><br><span class="line">        <span class="keyword">if</span> (QFile::<span class="built_in">exists</span>(<span class="string">&quot;C:\\Windows\\System32\\wintun.dll&quot;</span>)) &#123;</span><br><span class="line">        QFile::<span class="built_in">copy</span>(QFile::<span class="built_in">copy</span>( QApplication::<span class="built_in">applicationDirPath</span>() + <span class="string">&quot;/wintun.dll&quot;</span>, <span class="string">&quot;C:\\Windows\\System32\\wintun.dll&quot;</span>););</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//打开文件系统重定向</span></span><br><span class="line">    <span class="built_in">Wow64RevertWow64FsRedirection</span>(OldValue);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h1><p>x’x’x’x’x’x’x’x’x’xx’x’x’x’x’xx’x’x’x’x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;title: 我的页面标题&lt;br&gt;date: 2024-12-19&lt;br&gt;type: page   # 这里根据你的页面类型选择，比如页面或文章&lt;br&gt;updated: 2024-12-20  # 如果有更新，可以在这里填写&lt;br&gt;description: 这是我的页面描述</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cpp-memory-leaks.github.io/2024/12/05/hello-world/"/>
    <id>https://cpp-memory-leaks.github.io/2024/12/05/hello-world/</id>
    <published>2024-12-05T13:55:29.018Z</published>
    <updated>2024-12-19T14:06:35.501Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="bug" scheme="https://cpp-memory-leaks.github.io/categories/bug/"/>
    
    
  </entry>
  
</feed>
